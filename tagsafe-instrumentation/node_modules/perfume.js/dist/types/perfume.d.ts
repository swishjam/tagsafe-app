import { IPerfumeOptions } from './types';
export default class Perfume {
    v: string;
    constructor(options?: IPerfumeOptions);
    /**
     * Start performance measurement
     */
    start(markName: string): void;
    /**
     * End performance measurement
     */
    end(markName: string, customProperties?: {}, doLogData?: boolean): void;
    /**
     * End performance measurement after first paint from the beging of it
     */
    endPaint(markName: string, customProperties?: object): void;
    /**
     * Removes the named mark from the browser's performance entry buffer.
     */
    clear(markName: string): void;
    /**
     * NTBT = Navigation Total Blocking Time
     *
     * This metric measures the amount of time the application may be blocked
     * from processing code during the 2s window after a user navigates
     * from page A to page B.
     *
     * Because this library is navigation agnostic, we have this method
     * to mark when the navigation starts.
     *
     * The NTBT metric is the summation of the blocking time of all long tasks
     * in the 2s window after this method is invoked.
     *
     * If this method is called before the 2s window ends; it will trigger a new
     * NTBT measurement and interrupt the previous one.
     *
     * Credit: Thank you Steven Lam for helping with this!
     */
    markNTBT(): void;
}
